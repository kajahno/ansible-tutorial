## Best practices and first playbook

### Prerequisites

Create a directory somewhere in your filesystem named `ansible`.

```eval_rst
.. important::
   For the purposes of the tutorial I'll assume it was created on :code:`~/ansible`.
```

```bash
(.venv) $ mkdir ~/ansible
```

Change directories to the previously created directory.
```bash
(.venv) $ cd ~/ansible
(.venv) ~/ansible $
```

### Create a role to provision the popular nginx webserver with a sample page

The way to think about a role is as a pre-defined set of tasks that can be controlled with parameters, and included in the plays, which are included on a playbook `.yaml` file.

#### Role `webservers-nginx`

We will name the role to be created as `webservers-nginx`. To proceed let's create the minimum required directory structure for the role:

* Create the file `webservers-nginx/tasks/main.yml`
    ```bash
    (.venv) ~/ansible $ mkdir -p roles/webservers-nginx/tasks/
    (.venv) ~/ansible $ touch roles/webservers-nginx/tasks/main.yml
    ```
* Include the following content in the file `main.yml` (careful with the spaces: YAML is very sensitive with this)
    ```eval_rst
    .. literalinclude:: 1_files/roles/webservers-nginx/tasks/main.yml
       :language: yaml
       :linenos:
    ```
    ```eval_rst
    .. warning::
       Do not use tabs as YAML doesn't support them (see here_).

    .. _here: https://yaml.org/faq.html

    ```
In this example we're just installing the popular webserver Nginx, starting it, and enabling the service at boot time (so if we reboot the destination host, this service will be auto-started).

### Create a playbook to use the role

Playbooks are the next level of abstraction towards the infrastructure. They include plays. A play can include tasks, and most importantly, roles.

Until now we don't have any hosts to use as target to run the playbook that will have included the role `webservers-nginx`, that's about to change.

#### Creating a virtual machine using Vagrant

With Vagrant we can spin up virtual machines easily. In this case we will spin up a particular Ubuntu Xenial image. See below:

* Initialize vagrant with an ubuntu image:
    ```bash
    (.venv) ~/ansible $ vagrant init bento/ubuntu-16.04 --minimal
    ```
    ```Note:: This will create the file 'Vagrantfile'.
    ```
* Open the autogenerated `Vagrantfile`, and make sure the content looks like this:
    ```eval_rst
    .. literalinclude:: 1_files/Vagrantfile
       :language: ruby
       :linenos:
    ```
* Start the virtual machine
    ```bash
    (.venv) ~/ansible $ vagrant up
    ```
    ```Note:: Time to get a cup of tea while this is done.
    ```

The steps above will help to create a local infrastructure that we can use to run our Ansible playbooks against. This helps in the way that you don't (and shouldn't) need to target your important infrastructure to test a particular playbook (careful with this!).

The Vagrant box we just installed can be found [here](https://app.vagrantup.com/bento/boxes/ubuntu-16.04). This image by default has the following ssh credentials:
* Username: `vagrant`
* Password: `vagrant`

##### How to SSH to a Vagrant VM

There are at least three ways of doing this
1. Using `vagrant`
   * From the same directory the Vagrantfile is located, run:
     ```
     (.venv) ~/ansible $ vagrant ssh
     ```
2. SSH to the forwarded port on localhost
   * When the machine was provisioned, an output similar to this was shown:
     ```eval_rst
     .. code-block:: bash
        :emphasize-lines: 3,6

        [...]
        ==> default: Forwarding ports...
            default: 22 (guest) => 2222 (host) (adapter 1)
        ==> default: Booting VM...
        ==> default: Waiting for machine to boot. This may take a few minutes...
            default: SSH address: 127.0.0.1:2222
        [...]
     ```
   * This means that to SSH to the vagrant VM you can simply do (using password):
     ```bash
     (.venv) ~/ansible $ ssh -p 2222 vagrant@localhost
     ```
   * Or using the generated private key:
     ```bash
     (.venv) ~/ansible $ ssh -p 2222 -i .vagrant/machines/default/virtualbox/private_key vagrant@localhost
     ```
3. Classic SSH to the host
   * Use the IP provided in the config (using password):
     ```bash
     (.venv) ~/ansible $ ssh vagrant@10.100.0.2
     ```
   * Or using the generated private SSH key:
     ```bash
     (.venv) ~/ansible $ ssh -i .vagrant/machines/default/virtualbox/private_key vagrant@10.100.0.2
     ```

Because Vagrant is using [Virtualbox](https://www.virtualbox.org/wiki/VirtualBox) as a default virtualizer, if you open the virtual box user interface you should see the machine we just created running.

#### Simple inventory file

The playbook we are going to create needs an inventory file, therefore we will create a tiny one and put the minimun content (this will be covered better in the next chapter).

* Create the inventor file:
    ```bash
    (.venv) ~/ansible $ touch inventory.ini
    ```
* Include the following content in the file:
    ```eval_rst
    .. literalinclude:: 1_files/inventory.ini
       :language: ini
       :linenos:
    ```

<br/>
After we have the inventory file, and the infrastructure ready, we are ready to create our first playbook.

* Create the file `webservers.yml`:
    ```
    (.venv) ~/ansible $ touch webservers.yml
    ```
* Include the following content in the file:
    ```eval_rst
    .. literalinclude:: 1_files/webservers.yml
       :language: ini
       :linenos:
    ```
* Run the playbook:
    ```bash
    (.venv) ~/ansible $ ansible-playbook -i inventory.ini webservers.yml
    ```

The output of running the playbook should be:
```bash
PLAY [nginx_webservers] **************************************************************************************************************************************************************************************************************

TASK [Gathering Facts] ***************************************************************************************************************************************************************************************************************
ok: [127.0.0.1]

TASK [include_role : webservers-nginx] ***********************************************************************************************************************************************************************************************

TASK [webservers-nginx : install the nginx reverse proxy] ****************************************************************************************************************************************************************************
changed: [127.0.0.1]

TASK [webservers-nginx : enable nginx service] ***************************************************************************************************************************************************************************************
ok: [127.0.0.1]

PLAY RECAP ***************************************************************************************************************************************************************************************************************************
127.0.0.1                  : ok=3    changed=1    unreachable=0    failed=0
```

To confirm everything has worked fine, if you access http://localhost:8080 this should display the popular Nginx welcome page:

![Nginx welcome page](img/2_1_nginx.png)



### References
- [Python virtual environments](https://docs.python-guide.org/dev/virtualenvs/)
- [Vagrant](https://www.vagrantup.com/)
- [Vagrant cloud](https://app.vagrantup.com/boxes/search)
- [Learn more about Ansible](https://www.ansible.com/how-ansible-works/)
- [Ansible documentation](http://docs.ansible.com/)
